= Concurrency Tips
Eugene Shelestovich, Fitbit

== Plan for today
* Why concurrency ?
* Threads and pools
* Locks and scalability
* Tips and tricks

== Concurrency is hard
* Not enough synchronization - *races and deadlocks*
* Too much synchronization - *slow programs*

image::race.png[]

== {conseal}

= Threads

== {conceal}
image::pool.jpg[]

== {conceal}
image::thread_map.png[]

== Unstoppable app
[source,java]
----
public static void main(String[] args) {
  ExecutorService executor = Executors.newSingleThreadExecutor();
  executor.submit(() ->
    System.out.println("Background thread finished."));
  System.out.println("Main thread finished.");
}
----

== Guava to the rescue
[source,java]
----
ExecutorService executor = MoreExecutors.getExitingExecutorService(
  (ThreadPoolExecutor) yourExecutor);
----

that basically does:

[source,java]
----
executor.setThreadFactory(
  new ThreadFactoryBuilder().setDaemon(true))
----

== Interrupt
[source,java]
----
while ((line = in.readLine()) != null) {
  try {
    // ...
  } catch (InterruptedException e) {
    e.printStackTrace(); // or ignore
  }
}
----

== Correct way
[source,java]
----
while (!Thread.currentThread().isInterrupted() && ...) {
  try {
    // ...
  } catch (InterruptedException e) {
    Thread.currentThread().interrupt();
  }
}
----

== Poison pill
[source,java]
----
private static final Message POISON_PILL = new Message(-1);

while (true) {
  Message message = queue.take();
  if (POISON_PILL.equals(message)) {
    return;
  }

  // handle message here ...
}
----

== Fixed pool, right ?
[source,java]
----
ExecutorService executor = Executors.newFixedThreadPool(8);

while (true) {
  executor.execute(() -> {
    LOG.info(Thread.currentThread().getName() + " is working");
    Uninterruptibles.sleepUninterruptibly(1L, TimeUnit.SECONDS);

    if (i.getAndIncrement() % 4 == 0) { // inject 25% errors
      throw new RuntimeException();
    }
  });
}
----

== Wrong!
[source,console]
----
pool-1-thread-1 is working
pool-1-thread-2 is working
Exception in thread "pool-1-thread-1" java.lang.RuntimeException
  at UnstoppablePool.lambda$main$0(UnstoppablePool.java:27)
pool-1-thread-4 is working
pool-1-thread-5 is working
pool-1-thread-6 is working
pool-1-thread-8 is working
Exception in thread "pool-1-thread-6" java.lang.RuntimeException
  at UnstoppablePool.lambda$main$0(UnstoppablePool.java:27)
pool-1-thread-9 is working
pool-1-thread-10 is working
----

== Try-catch everything
[source,java]
----
new Runnable() {
  public void run() {
    try {
      // logic goes here
    } catch (Throwable e) {
      // error handling
    }
  }
}
----

== Global exception handler
At least log an error:
[source,java]
----
Thread.setDefaultUncaughtExceptionHandler(
  new Thread.UncaughtExceptionHandler() {
    public void uncaughtException(Thread t, Throwable e) {
      LOG.error("Thread [" + t + "] died abruptly", e);
    }
  });
----
or bail out:
[source,java]
----
Thread.setDefaultUncaughtExceptionHandler(
  UncaughtExceptionHandlers.systemExit());
----

== Unbounded queue
[source,java]
----
ExecutorService pool = Executors.newSingleThreadExecutor();

while (true) {
  i.getAndIncrement();
  pool.execute(() -> {
    LOG.info("Tasks in queue: " + i.get());
    LOG.info("Slow thread working...");
    Uninterruptibles.sleepUninterruptibly(5L, TimeUnit.SECONDS);
  });
}
----

== {conseal}
[source,console]
----
Tasks in queue: 10406024
Slow consumer working...
java.lang.OutOfMemoryError: GC overhead limit exceeded
----
image::disaster_girl.jpg[]

== {conceal}
image::gc.png[]

== Max threads ?
image::many.png[]

== In fact, not so many
[source,console]
----
eshelestovich:/$ java TooManyThreads
1
2
...
2023
2024
Exception in thread "main" java.lang.OutOfMemoryError: unable to create new native thread
  at java.lang.Thread.start0(Native Method)
----

[source,console]
----
eshelestovich:/$ sysctl kern.num_taskthreads
kern.num_taskthreads: 2048
----

== Defaults too high
[source,console]
----
eshelestovich:/$ java -server -XX:+UnlockDiagnosticVMOptions
-XX:+PrintFlagsFinal -XX:+PrintCommandLineFlags
-version | grep ThreadStackSize

intx ThreadStackSize = 1024
----

* GC pressure
* Huge thread dumps
* Try `-Xss256K`

== Docker/Mesos issues
* `Runtime.getRuntime().availableProcessors()`
* *Hundreds* of wasted threads on *64* CPU cores
* Explicitly limit the number of threads

[source,console]
----
-XX:ParallelGCThreads=8
-XX:ConcGCThreads=2
----

== Tune your pools
[source,java]
----
new ThreadPoolExecutor(
  8, 32,
  60L, TimeUnit.SECONDS, // keepAliveTime
  new ArrayBlockingQueue<>(1024),
  new ThreadPoolExecutor.CallerRunsPolicy()); // backpressure
----

== {conceal}
image::backpressure.png[]

* Slow down producer
* Buffer up
* Drop % of data

== Optimal threads count
For CPU bound tasks, _Brian Goetz_ recommends:
****
threads = number of CPUs + 1
****
For mixed workloads, _Subramaniam & Goetz_ agree on:
****
threads = number of CPUs * (1 + wait time / service time)
****
E.g. with 8-cores CPU on a 30% I/O workload:
****
8 * (1 + 30 / 70) = [big]*11* threads
****

== {conseal}
image::amdahls_law.jpg[]

If *95%* of the program is parallelizable, the theoretical maximum speedup is only *x20*

== Little's Law
image::littles_law.jpg[]

In order to maintain throughput of *500* req/sec with average latency of *150* ms, we need to allocate *75* parallel workers (threads/processes). +

It works the other way around too!

== Default names
[source,console]
----
Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.92-b14 mixed mode):
"pool-1-thread-32" #42 prio=5
"pool-1-thread-31" #41 prio=5
"pool-1-thread-30" #40 prio=5
"pool-1-thread-29" #39 prio=5
"pool-1-thread-28" #38 prio=5
"pool-1-thread-27" #37 prio=5
"pool-1-thread-26" #36 prio=5
...
----

CAUTION: Complicates troubleshooting

== {conseal}
image::name.jpg[Heizenberg]
[source,java]
----
ThreadFactory factory = new ThreadFactoryBuilder()
  .setNameFormat("my-kafka-pool-%d").build();
ExecutorService pool = Executors.newFixedThreadPool(4, factory);
----

== Summary
Threads section summary...

== {conseal}
= Locks

== {conseal}
image::mutex.png[]

== Lock on mutable object
[source,java]
----
private Object[] items = new Object[] {};

private ArrayCopy add(Object newItem) {
  synchronized (items) {
    Object[] newArray = new Object[items.length + 1];
    ...
    items = newArray; // lock object mutation
  }
  return this;
}
----

CAUTION: Bug in Tomcat (46990)

== Lock on literals
[source,java]
----
private final String lock = "LOCK";

public void doSomething() {
  synchronized (lock) { ... }
}
----
[source,java]
----
private final Integer lock = 42;

public void doSomething() {
  synchronized (lock) { ... }
}
----
CAUTION: Bug in Jetty

== Lock scope
[source,java]
----
private static SysCtx ctx; // static shared state

public synchronized SysCtx getSysCtx() { // two intrinsic locks
  if (ctx == null) {
    ctx = new SysCtx();
  }
  return ctx;
}
----
CAUTION: Bug in Android (12015587)

== I/O under lock
[source,java]
----
synchronized (this) {
  Future<User> user = remoteService.getUser(id); // network I/O
  // ...
}
----
CAUTION: Bug in Log4j (41214). Set timeouts explicitly!

== ReentrantLock
[options="incremental"]
* You can hold a lock across methods
* `tryLock()`, `tryLock(long timeout)` and `lockInterruptibly()`
* Multiple `Condition` per lock
* Configurable fairness to avoid starvation
* Could be faster in high-contention scenarios due to _Lock Bargain_
* Some tools don't show it in thread dumps, use `jstack -l`
* Use it when you really need something that `synchronized` doesn't provide

== synchronized
[options="incremental"]
* No need to explicitly unlock!
* Could be faster in low-contention scenarios
* _Biased Lock_, thin -> biased | fat (inflated)
* _Lock Coarsening_, _Lock Striping_, _Lock Elision_ JVM optimizations
* [big]#Benchmark# on your specific workload

== {conseal}
Lock Coarsening, `-XX:+EliminateLocks`
[source,java]
----
public String getNames(StringBuffer sb) {
  sb.append("Alice");
  sb.append("Claire");
  return sb.toString();
}
----

Lock Elision, `-XX:+DoEscapeAnalysis`
[source,java]
----
public String getNames() {
  StringBuffer sb = new StringBuffer();
  sb.append("Alice");
  sb.append(someName);
  sb.append("Barbara");
  return sb.toString();
}
----

== {conseal}
[big]#Serialization# hurts scalability +
[big]#Context switches# hurt performance +
[big]#Contended# locking causes both

== Tactical Tips
[options="incremental"]
* Hold locks as briefly as possible
* Avoid expensive calculations and I/O
* `AtomicReference, AtomicReferenceArray, AtomicReferenceFieldUpdater`
* `ConcurrentHashMap, ConcurrentSkipListSet, CopyOnWriteArrayList`
* `ReadWriteLock`, `StampedLock` (since 1.8) for read-heavy scenarios
* Be careful with object pooling
* [big]#Measure, donâ€™t guess!# JMH, JVisualVM, JMC

== Lock Striping
[source,java]
----
Lock[] locks = new ReentrantLock[16];

public User getUser(int id) {
  Lock lock = locks[id % 16];
  lock.lock();
  ...
}
----

* `ConcurrentHashMap` holds `16` buckets/locks by default
* `com.google.common.util.concurrent.Striped`

== Strategic Tips
[options="incremental"]
* Avoid synchronization completely at design time
* Local variables and `ThreadLocal`
* Queue per consumer, partitioning
* Functional programming, immutability
* Example: sum of all ages in the room

== Alternatives
[options="incremental"]
* Actors/SEDA
* Composable Futures/Promises
* async/await
* Co(Go)routines
* Green threads, fibers
* STM
* Forks/IPC, etc

== Static code analysis
image::idea.png[]
image::warning.png[]

* IntelliJ IDEA, SonarQube, FindBugs, PMD, errorprone.info
* Simple search by `synchronized` keyword can go a long way

== {conseal}
image::questions.jpg[]

// sysctl kern.num_taskthreads
// java -server -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal -XX:+PrintCommandLineFlags -version | grep ThreadStackSize

