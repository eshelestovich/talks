= Concurrency Tips

== Concurrency is hard
* Not enough synchronization leads to [big]#races and deadlocks#
* Too much synchronization leads to slow programs

image::race.png[]

== {conceal}
[quote, The Unix Way]
____
First make it right, then make it fast - if it is not already fast enough.
____

== How to stop a thread ?
[source,java]
----
Thread t = new Thread(() -> {
  BufferedReader in = new BufferedReader(
    new InputStreamReader(socket.getInputStream()));
  while ((line = in.readLine()) != null) {
    try {
      System.out.println("Working on " + line);
      // do some useful work
      TimeUnit.SECONDS.sleep(10L);
    } catch (InterruptedException e) {
      e.printStackTrace(); // or simply ignore
    }
  }
});
t.start();
----

== Correct way
[source,java]
----
while (!Thread.currentThread().isInterrupted() && ...) { // <1>
  try {
    // ...
  } catch (InterruptedException e) {
    Thread.currentThread().interrupt(); // <2>
  }
}
...
t.interrupt(); // <3>
----
<1> Check if somebody wants to stop the thread
<2> Re-set interrupted flag for callers
<3> Actual interruption

== Poison pill
[source,java]
----
private static final Message POISON_PILL = new Message(-1);

while (true) {
  Message message = queue.take();
  if (POISON_PILL.equals(message)) { // <1>
    return;
  }
  System.out.println(message.toString());
  messageCount++;
}
----
<1> Graceful shutdown

== Unstoppable app
[source,java]
----
public static void main(String[] args) {
  ExecutorService executor = Executors.newSingleThreadExecutor();
  executor.submit(() ->
    System.out.println("Background thread finished."));
  System.out.println("Main thread finished.");
}
----

[source,console]
----
eshelestovich:/$ java UnstoppablePool
Main thread finished.
Background thread finished.
...
----

CAUTION: The process is still alive!

== Guava to the rescue
[source,java]
----
ExecutorService executor = MoreExecutors.getExitingExecutorService(
  (ThreadPoolExecutor) Executors.newSingleThreadExecutor());
----

that basically does:

[source,java]
----
executor.setThreadFactory(
  new ThreadFactoryBuilder().setDaemon(true))
----

== Fixed pool, right ?
[source,java]
----
ExecutorService executor = Executors.newFixedThreadPool(8)); // <1>
while (true) {
  executor.execute(() -> {
    LOG.info(Thread.currentThread().getName() + " is working");
    Uninterruptibles.sleepUninterruptibly(1L, TimeUnit.SECONDS);
    
    if (i.getAndIncrement() % 4 == 0) { // <2>
      throw new RuntimeException();
    }
  });
}
----
<1> 8 threads initially
<2> Inject 25% errors

== Wrong!
[source,console]
----
pool-1-thread-1 is working
pool-1-thread-2 is working
Exception in thread "pool-1-thread-1" java.lang.RuntimeException
  at UnstoppablePool.lambda$main$0(UnstoppablePool.java:27)
pool-1-thread-4 is working
pool-1-thread-5 is working
pool-1-thread-6 is working
pool-1-thread-8 is working
Exception in thread "pool-1-thread-6" java.lang.RuntimeException
  at UnstoppablePool.lambda$main$0(UnstoppablePool.java:27)
pool-1-thread-9 is working
pool-1-thread-10 is working
----

== Try-catch everything
Always wrap your `Runnable.run()` method in `try-catch`:

[source,java]
----
new Runnable() {
  public void run() {
    try {
      // business logic
    } catch (Throwable e) {
      // error handling
    }
  }
}
----

== Global exception handler
At least log errors:
[source,java]
----
Thread.setDefaultUncaughtExceptionHandler(
  new Thread.UncaughtExceptionHandler() {
    public void uncaughtException(Thread t, Throwable e) {
      LOG.error("Thread " + t + " died abruptly", e);
    }
  });
----
or bail out:
[source,java]
----
Thread.setDefaultUncaughtExceptionHandler(
  UncaughtExceptionHandlers.systemExit());
----

== Unbounded queue
[source,java]
----
ExecutorService pool = Executors.newSingleThreadExecutor();
AtomicLong i = new AtomicLong();
while (true) {
  pool.execute(() -> {
    System.out.println("Tasks in queue: " + i.get());
    System.out.println("Slow consumer working...");
    Uninterruptibles.sleepUninterruptibly(5L, TimeUnit.SECONDS);
  });
  i.getAndIncrement();
}
----

== {conseal}
[source,console]
----
Tasks in queue: 10406024
Slow consumer working...
java.lang.OutOfMemoryError: GC overhead limit exceeded
----
image::disaster_girl.jpg[]

== {conceal}
image::gc.png[]

== Tune your pools
[source,java]
----
new ThreadPoolExecutor(
  8, 
  8,
  60L, TimeUnit.SECONDS,
  new ArrayBlockingQueue<>(1024), // <1>
  new ThreadPoolExecutor.CallerRunsPolicy()); // <2>
----
<1> Limit queue size
<2> Apply backpressure

== {conseal}
How many threads can I run on my MBP 2.5 GHz Core i7 16 GB DDR3 ?

[source,java]
----
while(true) { 
  new Thread(() -> {
    System.out.println(count.incrementAndGet());
    Uninterruptibles.sleepUninterruptibly(100000000, TimeUnit.SECONDS);
  }).start(); 
}
----
image::many.png[]

== In fact not so many
[source,console]
----
eshelestovich:/$ java TooManyThreads
1
2
...
2023
2024
Exception in thread "main" java.lang.OutOfMemoryError: unable to create new native thread
  at java.lang.Thread.start0(Native Method)
----

[source,console]
----
eshelestovich:/$ sysctl kern.num_taskthreads
kern.num_taskthreads: 2048
----

== Default stack size
[source,console]
----
eshelestovich:/$ java -server -XX:+UnlockDiagnosticVMOptions
-XX:+PrintFlagsFinal -XX:+PrintCommandLineFlags
-version | grep ThreadStackSize

intx ThreadStackSize = 1024
----

* GC pressure
* Large thread dumps
* Complicates debugging & profiling
* Try `-Xss256K`

== Dynamic pools
[source,java]
----
new ThreadPoolExecutor(0, 
                      Integer.MAX_VALUE,
                      30L, TimeUnit.SECONDS, // <1>
                      new ArrayBlockingQueue<>(2048));
----

.javadoc
****
`keepAliveTime` - when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating.
****

== Vertical scaling
image::peak.png[]

== Optimal number
For CPU bound tasks, _Brian Goetz_ recommends:
****
threads = number of CPUs + 1
****
For mixed workloads, _Subramaniam & Goetz_ agree on:
****
threads = number of CPUs * (1 + wait time / service time)
****
E.g. with 8-cores CPU on a 30% I/O workload:
****
8 * (1 + 30 / 70) = [big]*11* threads
****

== {conseal}
image::amdahls_law.jpg[]
Scalability is limited by the amount of code executed *serially*. +
E.g. if *95%* of the program can be parallelized, the theoretical maximum speedup would be *20* times.

== Little's Law
image::littles_law.jpg[]

In order to maintain throughput of *500* req/sec with average latency of *150* ms, we need to allocate *75* parallel workers (threads/processes). +

It works the other way around too!

== Mesos issues
* `Runtime.getRuntime().availableProcessors()` returns the total number of CPU cores available to the entire server
* On a resonably powerful server with *64* CPU cores it leads to *hundreds* of wasted threads being allocated
* You have to manually limit the number of threads available to the process

[source,console]
----
-XX:ParallelGCThreads=8
-XX:ConcGCThreads=2
-Dcom.twitter.finagle.netty4.numWorkers=10
----

== Default names
[source,console]
----
Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.92-b14 mixed mode):
"pool-1-thread-32" #42 prio=5
"pool-1-thread-31" #41 prio=5
"pool-1-thread-30" #40 prio=5
"pool-1-thread-29" #39 prio=5
"pool-1-thread-28" #38 prio=5
"pool-1-thread-27" #37 prio=5
"pool-1-thread-26" #36 prio=5
...
----

CAUTION: Complicates debugging and troubleshooting

== {conseal}
image::name.jpg[Heizenberg]
[source,java]
----
ThreadFactory factory = new ThreadFactoryBuilder()
  .setNameFormat("cw-finagle-pool-%d")
  .setDaemon(true)
  .build();
ExecutorService pool = Executors.newFixedThreadPool(4, factory);
----

== Lock on mutable object
[source,java]
----
private Object[] items = new Object[] {};

private ArrayCopy add(Object newItem) {
  synchronized (items) {
    Object[] newArray = new Object[items.length + 1];
    newArray[items.length] = newItem;
    System.arraycopy(items, 0, newArray, 0, items.length);
    items = newArray; // lock object mutation
  }
  return this;
}
----

CAUTION: Bug in Tomcat 6 (46990)

== Lock on literals
[source,java]
----
private final String lock = "LOCK";

public void doSomething() {
  synchronized (lock) { ... }
}
----
[source,java]
----
private final Integer lock = 42;

public void doSomething() {
  synchronized (lock) { ... }
}
----
CAUTION: Bug in Jetty 6.1.3

== Lock scope
[source,java]
----
private static SysCtx ctx; // <1>

public synchronized SysCtx getSysCtx() { // <2>
  if (ctx == null) {
    ctx = new SysCtx();
  }
  return ctx;
}
----
<1> Static shared state
<2> Two intrinsic locks

CAUTION: Bug in Android (12015587)

== wait/notify
[source,java]
----
public synchronized void process() { // condition under lock
  while(queue.isEmpty()) this.wait(); // spurious wake-ups
  
  Object item = queue.remove();
  processItem(item);
}

public synchronized void add(Object item) {
  queue.add(item);
  this.notifyAll(); // not notify()
}
----

CAUTION: Bug in Eclipse (366048). Introduced in 2004, fixed in 2013.

== ThreadLocal
image::threadlocal.png[]

* Great tool for avoiding concurrency & synchronization
* The lifecyle of `ThreadLocal` variables is directly interconnected to the lifecyle of its corespondig thread
* Depending on the number of threads in the pool and the size of the object in the `ThreadLocal` variable, critical memory problems can occur
* *500* long-living Tomcat threads each holding *10* Mb of data results in *5* Gb of permanently occupied heap
* Always cleanup with `ThreadLocal.remove()`

CAUTION: Bug in Log4j 1.2 (50486)

== I/O under lock
[source,java]
----
synchronized (this) { // <1>
  Future<UserPreferencesResponse> prefs = prefsClient.get( // <2>
    new UserPreferencesGetRequest()).onSuccess(doSuccess(() ->
      logger.info("Preferences received for user {}", recipientId)));
}
----

Set timeouts explicitly:
[source,java]
----
return ThriftClientBuilder
  .newBuilder(UserMicroservice.ServiceIface.class)
  .setRequestTimeoutMillis(5_000)
  .setSessionAcquisitionTimeoutMillis(10_000)
  .build();
----

CAUTION: Similar bug found in Log4j 1.2.17 (41214) and https://jira.fitbit.com/browse/IM-1307[IM-1307]

== ReentrantLock
* Unstructured, you can hold a lock across methods
* `tryLock()`, `tryLock(long timeout)` and `lockInterruptibly()`
* Multiple `Condition` per lock
* Configurable fairness to avoid starvation
* Could be faster in high-contention scenarios due to _Lock Bargain_
* Use it when you actually need something that `synchronized` doesn't provide

[source,java]
----
Lock lock = new ReentrantLock();
lock.lock();
try {
  // update object state
} finally {
  lock.unlock();
}
----

== synchronized { }
* No need to manually unlock
* _Biased Lock_, thin -> biased | fat (inflated), breaks on `System.identityHashCode()`
* _Lock Coarsening_, _Lock Striping_, _Lock Elision_ JVM optimizations
* Some tools show only `synchronized` in thread dumps, use `jstack -l`
* Could be faster in low-contention scenarios

CAUTION: [big]#Benchmark# on your specific workload

//----
//"AMQP Connection 10.19.36.12:5671" prio=10 waiting on condition [0x9f57e000]
//   java.lang.Thread.State: WAITING (parking)
//    at sun.misc.Unsafe.park(Native Method)
//    - parking to wait for  <0xa5884f88> (a java.util.concurrent.locks.ReentrantLock)
//----

== {conseal}
Lock Coarsening, `-XX:+EliminateLocks`
[source,java]
----
public String getNames(StringBuffer sb) {
  sb.append("Alice");
  sb.append("Claire");
  return sb.toString();
}
----

Lock Elision, `-XX:+DoEscapeAnalysis`
[source,java]
----
public String getNames() {
  StringBuffer sb = new StringBuffer();
  sb.append("Alice");
  sb.append(someName);
  sb.append("Barbara");
  return sb.toString();
}
----

== {conseal}
*Serialization* hurts scalability, *context switches* hurt performance. +
Contended locking causes both.

* Hold locks as briefly as possible, no expensive calculations
* Atomics: `AtomicReference, AtomicReferenceArray, AtomicReferenceFieldUpdater`
* Concurrent collections: `ConcurrentHashMap, ConcurrentSkipListSet, CopyOnWriteArrayList`
* `ReadWriteLock`, `StampedLock` (since 1.8) for read-heavy scenarios
* Local variables and `ThreadLocal`
* Favor *immutability*
* Avoid object pooling

CAUTION: [big]#Measure, don’t guess!# JMH, JVisualVM, JMC

== Lock Striping
* Use separate fine-grained locks to guard *independent* data
* Trade-off between memory and performance
* `ConcurrentHashMap` holds `16` buckets/locks by default
* `java.util.concurrent.atomic.LongAdder`
* `com.google.common.util.concurrent.Striped`

[source,java]
----
Lock[] locks = new ReentrantLock[8];

public User getUser(int id) {
  Lock lock = locks[id & 7]; // id % 8
  lock.lock();
  ...
}
----

== Know alternatives
* Actors/SEDA
* Composable Futures/Promises
* STM
* Async/await
* Co(Go)routines
* Green threads, fibers
* Callbacks (hell)
* Forks/IPC
* etc.

== Static code analysis
image::idea.png[]
image::warning.png[]

* IntelliJ IDEA, SonarQube, FindBugs, PMD
* Simple search by `synchronized` keyword can go a long way

== Q&A
