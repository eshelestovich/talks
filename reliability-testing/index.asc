= Reliability Engineering
Author: Eugene Shelestovich

== {conceal}
[quote, Traditional SRE saying]
____
Hope is not a strategy.
____

== Who is SRE ?
* Created at Google around 2003 by Ben Treynor
* Now around 1500 engineers at Google are SREs
* Exists in Apple, Twitter, Facebook, Dropbox, Amazon, GitHub, Atlassian and Fitbit
* Dev teams want to release awesome new features to the masses, and see them take off in a big way. Ops teams want to make sure those features don’t break things.
* We dedicate a team of Software Engineers with Ops skills to continuously oversee the reliability of the product and call them SRE.

== {conceal}
[quote, Ben Treynor, VP and founder of Google SRE]
____
Fundamentally, it's what happens when you ask a software engineer to design an operations function.
____

== What does SRE do ?
* Maintains large production systems
* *Consults other teams about best practices*
* Improves tooling and automation
* Incidents and change management, blameless post-mortems
* Measures everything!
* Quantifies failure and availability by setting SLOs, gives teams error budget
* *Identify systemic issues and bottlenecks*
* *Embraces risk and encourages developers to move quickly by reducing the cost of failure*
* Free agent, moving between projects and orgs

== Reliability in software
****
The probability of failure-free software operation for a specified period of time in a specified environment.
****

* Fault-tolerance
* High availability
* Scalability
* Security
* Performance

== {conseal}
Ability to keep operating even if a component, or multiple components, fail.

image::fault_tolerance.png[]

== {conseal}
The outage will be brief because it will not take long to redeploy the required component.

image::high_availability.png[]

== {conseal}
You are saving your business by ditching your compromised infrastructure.

image::disaster_recovery.png[]

== {conseal}
Ability of a system to handle a growing amount of work without a failure.

image::scalability_failure.jpg[]

== What can go wrong
[options="incremental"]
* Process crash (OOME, GC, Linux memory manager)
* Disk/memory errors (write failure, not enough space)
* Server dies (faulty hardware, power outage)
* Network glitch (split-brain, dropped packets, high latency, low bandwidth)
* Timing issues (clock skew, NTP misconfiguration)
* Byzantine failure (malicious packet, DDOS, etc)

== Hardware failures
* 1000 individual machine failures (2% per year)
* thousands of hard drive failures (4% per year)
* 20 rack failures (40-80 machines instantly disappear, 1-6 hours to get back)
* 5 racks going wonky (10-20 machines seeing 50% packet loss)
* 12 router reloads (takes out DNS for a couple minutes)
* 8 network maintenances (30-minute random connectivity losses)
* slow disks, bad memory, misconfigured machines, etc

== Law of large numbers
****
The more nodes and disks you have in your cluster, the more likely it is to lose data:
****

* Super reliable servers
* MTBF of 30 years
* 10 000 of those
* Watch one server fail [big]#every day#

== But replication...
image:data_loss_probability.png[]
If a node has a 0.1% chance of dying, the graph shows that in a 10K-node cluster, the chance of permanently losing all three replicas of some piece of data is about 0.25% per day. Yes, you read that correctly: the risk of losing all three copies of some data is more than twice as great as the risk of losing a single node! What is the point of all this replication again?

So the probability of permanently losing data in a 10,000 node cluster is really 0.25% per day, that would mean a 60% chance of entirely losing some data in a year.

In an 10K-node cluster it’s almost certain that a few nodes are always dead at any given moment.

And we don't even account for correlated failures!

== Latency amplification
Server with 1 ms avg but 1 sec P99 latency:

* Touch 1 of these - 1% of requests take ≥1 sec
* Touch 100 of these - [big]#63%# of requests take [big]#≥1 sec#

== {conseal}
image::page_abandonment.png[]

* Amazon: page load slowdown of just *1 second* costs *$1.6 billion* in sales each year +
* Google: by slowing search results by *0.5 second* we could lose *8 million* searches per day +
* 2,500 online consumers EU survey found out that *67%* of shoppers said that site slowness is the top reason to abandon a purchase

== {conceal}
image::testing_pyramid.png[]

== {conseal}
.Simple Testing Can Prevent Most Critical Failures
****
https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-yuan.pdf
****

* 198 randomly sampled failures of Cassandra, HBase, HDFS, MapReduce, Redis
* Almost all (92%) are the result of incorrect handling of external errors
* Majority (77%) can be reproduced by a simple test
* Almost all (98%) are guaranteed to manifest on no more than 3 nodes
* Most failures (90%) require no more than 3 input events to get them to manifest
* 74% of them are deterministic – they are guaranteed to happen given the right input
* For a majority (84%), all of their triggering events are explicitly logged
* Logs are noisy though - average number of log messages printed by each failure is 824

== I/O under lock
A data loss incident on large production HBase cluster:

[source,java]
----
write_lock();
remove_dir(); // took too long for a large directory
...
write_unlock();
----

== No retry on I/O error
Another data loss incident on large production HBase cluster:

[source,java]
----
try {
  splitRegion(...);
} catch (Exception ex) { // flaky filesystem I/O error
  LOG.error("Split failed.");
  // TODO: retry split
}
----

== Over-catch exception
1000+ nodes HDFS cluster brought down by an over-catch:

[source,java]
----
try {
  namenode.registerDatanode();
} catch (Throwable t) { // network glitch on NameNode
  System.exit(-1);
}
----

== Missing shutdown
MapReduce job hang on ResourceManager restart. +
It took down a 4000+ nodes Hadoop production cluster:

[source,java]
----
try {
  ...
} catch (IOException e) {
  LOG.error(“Error event from RM: shutting down..”);
  // no actual shut down implemented
}
----

== Software failures

== {conseal}
image::drive_survival.png[]

== Byzantine failure
We had a bug in Kafka recently that lead to the server incorrectly interpreting a corrupt request as a corrupt log, and shutting itself down to avoid appending to a corrupt log. Single machine log corruption is the kind of thing that should happen due to a disk error, and bringing down the corrupt node is the right behavior—it shouldn’t happen on all the machines at the same time unless all the disks fail at once. But since this was due to corrupt requests, and since we had one client that sent corrupt requests, it was able to sequentially bring down all the servers. Oops.

== Clock bugs
RHBA-2012:0124
a Linux bug which causes the system to crash after 208 days of uptime due to rounding error in clock logic. Since machines are commonly restarted sequentially this lead to a situation where a large percentage of machines went hard down one after another.

== GC bug
https://github.com/elastic/elasticsearch/issues/2488
GC pressure in an ElasticSearch cluster can cause secondary nodes to declare a primary dead and to attempt a new election. GC pauses and high IO_WAIT times due to IO can cause split brain, write loss, and index corruption.

== Cloud failures
https://forums.aws.amazon.com/thread.jspa?messageID=454155
Multiple network disruptions in EC2 caused a corrupted index for ElasticSearch and several hours of write loss in MongoDB cluster due to network partition and new leader election. VoltDB.
Microsoft Azure partitions caused RabbitMQ split-brain and loosing messages.


sudo ifconfig lo0 down/up
ip link set eth0 down/up
sleep $[ ( $RANDOM % 10 )  + 1 ]s
time curl --head google.by
ab -c 1 -n 10 -i http://www.google.by/
http-server -i false -c-1 -a 127.0.0.1 -p 8000 --cors
kill -SIGSTOP $(pidof java); sleep $(( 5 * 60 )); kill -SIGCONT $(pidof java);
curl --head --max-time 3 -L localhost:8000
https://github.com/tylertreat/comcast

== {conseal}

= Fault Injection

== Process crash
kill -9 <PID>
Cassandra is Crash-Only Software, stop script introduced later

== OOME

== Long GC

== Server crash
aws ec2 terminate-instances

== Network failure

== Packet drops

== High latency

== Low bandwidth

== Partial availability

== Disk issues
cat /proc/sys/kernel/sysrq
grep SYSRQ /boot/config-$(uname -r)
sudo sysctl -w kernel.sysrq=1
sudo su -
echo u > /proc/sysrq-trigger

petardfs
echo 1 > /dev/full

== Time

== Automate everything
* Python/Bash scripts
* HipChat/Slack/Telegram chat bots
* Failure Fridays @ PagerDuty, Game Days @ Stripe, DevAwesome Days @ Fitbit
* Security pentest bots
* Chaos Monkey, Chaos Gorilla, CHAMP from Netflix
* Chaos Cat from PagerDuty

https://www.pagerduty.com/blog/chaoscat-automating-fault-injection/

== Example
image::isolate_node.png[]

image::reboot_roulette.png[]

== Chaos Engineering
****
The discipline of experimenting on a distributed system
in order to build confidence in the system’s capability
to withstand turbulent conditions in production.
****

https://principlesofchaos.org/ +
https://medium.com/netflix-techblog/chaos-engineering-upgraded-878d341f15fa

== Design for failure
* Find ways to be partially available. Better to give users limited functionality than an error page. 100 ms lookup over 99% of data is usually better than 1 sec lookup over 100% of your data.
* Rigorous monitoring, profiling, logging and tracing
* Learn to estimate your capacity. Capacity planning regularly. back-of-the-envelope calculation. Numbers Everyone Should Know
* Put limits and timeouts on everything. That queue you have for batch processing items? Does it really need to be unbounded? When connecting to another service over the network, do you really need to block indefinitely? Do connections to your database need to remain forever, or would five minutes be so long that you’re probably better off killing it?
* Adopt Feature flags are how infrastructure is rolled out. Safer deployments. Path to A/B testing.
* Retry, but with exponential back-off. Most failures are transient. Don't DDOS yourself though.

== Design for failure (cont)
* Use supervisors and watchdog processes
* Add health checks, and use them to re-route requests
* Redundancy is more than just nice-to-have. Watch out SPOF.
* Prefer battle-tested tools over the “new hotness”
* Avoid distributed coordination. E.g. ID generation. Keep communication and consensus between those machines is kept to a minimum.
* If you can fit your problem in memory on a single machine - do it. A modern Computer can do more than you think they can. StackOverflow hosting 2 machines.
* Implement backpressure throughout your system. exponential back-offs, error codes (http 429),
* Judicious use of caching. Exploit data and time locality.
* Fail-fast, fail often. Restart automatically. Optimize for MTTR.
* Parallelize

https://medium.com/imgur-engineering/lessons-learned-writing-highly-available-code-7eaf3d7aae00

== {conseal}

= Questions
